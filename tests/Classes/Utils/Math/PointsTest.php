<?php
namespace Classes\Utils\Math;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-11 at 18:30:39.
 */
class PointsTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @covers Classes\Utils\Math\Points::isPointSame
     * @todo   Implement testIsPointSame().
     */
    public function testIsPointSame_1()
    {
        $point1 = new \Classes\Utils\AbstractInstance\Point(1,2,3);
        $point2 = new \Classes\Utils\AbstractInstance\Point(1,2,3);
        
        $result = Points::isPointSame($point1, $point2);
        
        $this->assertEquals($result, TRUE);
    }
    
    /**
     * @covers Classes\Utils\Math\Points::isPointSame
     * @todo   Implement testIsPointSame().
     */
    public function testIsPointSame_2()
    {
        $point1 = new \Classes\Utils\AbstractInstance\Point(1,2,3);
        $point2 = new \Classes\Utils\AbstractInstance\Point(3,2,1);
        
        $result = Points::isPointSame($point1, $point2);
        
        $this->assertEquals($result, FALSE);
    }

    /**
     * @covers Classes\Utils\Math\Points::isPointOnLine
     * @todo   Implement testIsPointOnLine().
     */
    public function testIsPointOnLine_1()
    {
        $p1 = new \Classes\Utils\AbstractInstance\Point(0,0,0);
        $p2 = new \Classes\Utils\AbstractInstance\Point(5,5,5);
        
        $line = new \Classes\Utils\AbstractInstance\Line($p1, $p2);
        $point = new \Classes\Utils\AbstractInstance\Point(1,2,3);
        
        $result = Points::isPointOnLine($point, $line);
        
        $this->assertEquals($result, 0);
        
    }
    
    /**
     * @covers Classes\Utils\Math\Points::isPointOnLine
     * @todo   Implement testIsPointOnLine().
     */
    public function testIsPointOnLine_2()
    {
        $p1 = new \Classes\Utils\AbstractInstance\Point(0,0,0);
        $p2 = new \Classes\Utils\AbstractInstance\Point(5,5,5);
        
        $line = new \Classes\Utils\AbstractInstance\Line($p1, $p2);
        $point = new \Classes\Utils\AbstractInstance\Point(6,6,6);
        
        $result = Points::isPointOnLine($point, $line);
        
        $this->assertEquals($result, 1);
        
    }
    
    /**
     * @covers Classes\Utils\Math\Points::isPointOnLine
     * @todo   Implement testIsPointOnLine().
     */
    public function testIsPointOnLine_3()
    {
        $p1 = new \Classes\Utils\AbstractInstance\Point(0,0,0);
        $p2 = new \Classes\Utils\AbstractInstance\Point(5,5,5);
        
        $line = new \Classes\Utils\AbstractInstance\Line($p1, $p2);
        $point = new \Classes\Utils\AbstractInstance\Point(5,5,5);
        
        $result = Points::isPointOnLine($point, $line);
        
        $this->assertEquals($result, 2);
        
    }
    
    /**
     * @covers Classes\Utils\Math\Points::isPointOnLine
     * @todo   Implement testIsPointOnLine().
     */
    public function testIsPointOnLine_4()
    {
        $p1 = new \Classes\Utils\AbstractInstance\Point(0,0,0);
        $p2 = new \Classes\Utils\AbstractInstance\Point(5,5,5);
        
        $line = new \Classes\Utils\AbstractInstance\Line($p1, $p2);
        $point = new \Classes\Utils\AbstractInstance\Point(3,3,3);
        
        $result = Points::isPointOnLine($point, $line);
        
        $this->assertEquals($result, 3);
        
    }
    
    /**
     * @covers Classes\Utils\Math\Points::isPointOnLine
     * @todo   Implement testIsPointOnLine().
     */
    public function testIsPointOnLine_5()
    {
        $p1 = new \Classes\Utils\AbstractInstance\Point(5,5,5);
        $p2 = new \Classes\Utils\AbstractInstance\Point(5,5,5);
        
        $line = new \Classes\Utils\AbstractInstance\Line($p1, $p2);
        $point = new \Classes\Utils\AbstractInstance\Point(5,5,5);
        
        $result = Points::isPointOnLine($point, $line);
        
        $this->assertEquals($result, 4);
        
    }
    
    /**
     * @covers Classes\Utils\Math\Points::isPointOnLine
     * @todo   Implement testIsPointOnLine().
     */
    public function testIsPointOnLine_6()
    {
        $p1 = new \Classes\Utils\AbstractInstance\Point(0,0,0);
        $p2 = new \Classes\Utils\AbstractInstance\Point(0,0,5);
        
        $line = new \Classes\Utils\AbstractInstance\Line($p1, $p2);
        $point = new \Classes\Utils\AbstractInstance\Point(0,0,0.5);
        
        $result = Points::isPointOnLine($point, $line);
        
        $this->assertEquals($result, 3);
        
    }
    
    /**
     * @covers Classes\Utils\Math\Points::isPointOnLine
     * @todo   Implement testIsPointOnLine().
     */
    public function testIsPointOnLine_7()
    {
        $p1 = new \Classes\Utils\AbstractInstance\Point(0,3,0);
        $p2 = new \Classes\Utils\AbstractInstance\Point(0,3,5);
        
        $line = new \Classes\Utils\AbstractInstance\Line($p1, $p2);
        $point = new \Classes\Utils\AbstractInstance\Point(0,0,0.5);
        
        $result = Points::isPointOnLine($point, $line);
        
        $this->assertEquals($result, 0);
        
    }
}

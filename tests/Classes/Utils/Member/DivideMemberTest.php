<?php
namespace Classes\Utils\Member;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-11 at 14:06:21.
 */
class DivideMemberTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var DivideMember
     */
    protected $node1Uin, $node2Uin, $node3Uin, $member1Uin, $member2Uin;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // NODE 1
        $node1 = new \Classes\Instance\Node\Node();
        $this->node1Uin = $node1->getUin();
        $node1->setProperty('x', new \Classes\Value\FloatValue(0));
        $node1->setProperty('y', new \Classes\Value\FloatValue(3));
        $node1->setProperty('z', new \Classes\Value\FloatValue(0));
        
        // NODE 2
        $node2 = new \Classes\Instance\Node\Node();
        $this->node2Uin = $node2->getUin();
        $node2->setProperty('x', new \Classes\Value\FloatValue(0));
        $node2->setProperty('y', new \Classes\Value\FloatValue(3));
        $node2->setProperty('z', new \Classes\Value\FloatValue(5));
        
        // NODE 3
        $node3 = new \Classes\Instance\Node\Node();
        $this->node3Uin = $node3->getUin();
        $node3->setProperty('x', new \Classes\Value\FloatValue(0));
        $node3->setProperty('y', new \Classes\Value\FloatValue(0));
        $node3->setProperty('z', new \Classes\Value\FloatValue(0.5));
        
        // MEMBER
        $member1 = new \Classes\Instance\Member\Member();
        $this->member1Uin = $member1->getUin();
        
        // ADD TO MODEL
         \Classes\Factory\Model\Model::addInstance($node1);
         \Classes\Factory\Model\Model::addInstance($node2);
         \Classes\Factory\Model\Model::addInstance($node3);
         \Classes\Factory\Model\Model::addInstance($member1);
                 
        // PINS
        $pin1 = new \Classes\Factory\Connection\PinConnection('000011');
        $pin2 = new \Classes\Factory\Connection\PinConnection('000111');
        
        // ADD TO HASH TABLE
        $hashTable = \Classes\Factory\Model\Model::getHashTable();
        $hashTable->setConnection($this->node1Uin, $this->member1Uin, $pin1);
        $hashTable->setConnection($this->node2Uin, $this->member1Uin, $pin2);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Classes\Utils\Member\DivideMember::divideMemberByNode
     * @todo   Implement testDivideMemberByNode().
     */
    public function testDivideMemberByNode()
    {
        $result = DivideMember::divideMemberByNode($this->member1Uin, $this->node3Uin);
        
        $this->assertNotSame($result, FALSE);
        
        if ($result != FALSE) {
            $this->member2Uin = $result;
        }
        
        // Get Hash Table
        $hashTable = \Classes\Factory\Model\Model::getHashTable();
        
        // PINS
        $pin0 = new \Classes\Factory\Connection\PinConnection('000000');
        $pin1 = new \Classes\Factory\Connection\PinConnection('000011');
        $pin2 = new \Classes\Factory\Connection\PinConnection('000111');
        
        
        $this->assertNotSame($hashTable->getConnection($this->member1Uin, $this->node1Uin), $pin1);
        $this->assertNotSame($hashTable->getConnection($this->member1Uin, $this->node3Uin), $pin0);
        $this->assertNotSame($hashTable->getConnection($this->member2Uin, $this->node3Uin), $pin0);
        $this->assertNotSame($hashTable->getConnection($this->member2Uin, $this->node2Uin), $pin2);
        
        \Classes\Factory\Model\Model::servicePrint();
    }

    /**
     * @covers Classes\Utils\Member\DivideMember::divideMemberByNodes
     * @todo   Implement testDivideMemberByNodes().
     */
    public function testDivideMemberByNodes()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Classes\Utils\Member\DivideMember::divideAllMembersByExistingNodes
     * @todo   Implement testDivideAllMembersByExistingNodes().
     */
    public function testDivideAllMembersByExistingNodes()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
